.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source NXsnsevent.nxdl.xml

.. index::
    ! NXsnsevent (contributed definition)
    ! snsevent (contributed definition)
    see: snsevent (contributed definition); NXsnsevent

.. _NXsnsevent:

==========
NXsnsevent
==========

**Status**:

  contributed definition, extends :ref:`NXobject`, version 1.0

**Description**:

  This is a definition for event data from Spallation Neutron Source (SNS) at ORNL.

**Symbols**:

  No symbol table

**Groups cited**:
  :ref:`NXaperture`, :ref:`NXattenuator`, :ref:`NXcollection`, :ref:`NXcrystal`, :ref:`NXdata`, :ref:`NXdetector`, :ref:`NXdisk_chopper`, :ref:`NXentry`, :ref:`NXevent_data`, :ref:`NXgeometry`, :ref:`NXinstrument`, :ref:`NXlog`, :ref:`NXmoderator`, :ref:`NXmonitor`, :ref:`NXnote`, :ref:`NXorientation`, :ref:`NXpolarizer`, :ref:`NXpositioner`, :ref:`NXsample`, :ref:`NXshape`, :ref:`NXsource`, :ref:`NXtranslation`, :ref:`NXuser`

.. index:: NXentry (base class); used in contributed definition, NXcollection (base class); used in contributed definition, NXlog (base class); used in contributed definition, NXpositioner (base class); used in contributed definition, NXnote (base class); used in contributed definition, NXdata (base class); used in contributed definition, NXevent_data (base class); used in contributed definition, NXinstrument (base class); used in contributed definition, NXsource (base class); used in contributed definition, NXdetector (base class); used in contributed definition, NXgeometry (base class); used in contributed definition, NXorientation (base class); used in contributed definition, NXshape (base class); used in contributed definition, NXtranslation (base class); used in contributed definition, NXdisk_chopper (base class); used in contributed definition, NXmoderator (base class); used in contributed definition, NXaperture (base class); used in contributed definition, NXattenuator (base class); used in contributed definition, NXpolarizer (base class); used in contributed definition, NXcrystal (base class); used in contributed definition, NXmonitor (base class); used in contributed definition, NXsample (base class); used in contributed definition, NXuser (base class); used in contributed definition

**Structure**:

  **(entry)**: :ref:`NXentry`


    .. index:: collection identifier (field)

    **collection_identifier**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: collection title (field)

    **collection_title**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: definition (field)

    **definition**: :ref:`NX_CHAR <NX_CHAR>`

      Official NXDL schema after this file goes to applications.

      Obligatory value:  ``NXsnsevent``

    .. index:: duration (field)

    **duration**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`}


    .. index:: end time (field)

    **end_time**: :ref:`NX_DATE_TIME <NX_DATE_TIME>`


    .. index:: entry identifier (field)

    **entry_identifier**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: experiment identifier (field)

    **experiment_identifier**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: notes (field)

    **notes**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: proton charge (field)

    **proton_charge**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_CHARGE <NX_CHARGE>`}


    .. index:: raw frames (field)

    **raw_frames**: :ref:`NX_INT <NX_INT>`


    .. index:: run number (field)

    **run_number**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: start time (field)

    **start_time**: :ref:`NX_DATE_TIME <NX_DATE_TIME>`


    .. index:: title (field)

    **title**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: total counts (field)

    **total_counts**: :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`}


    .. index:: total uncounted counts (field)

    **total_uncounted_counts**: :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`}


    **DASlogs**: :ref:`NXcollection`

      Details of all logs, both from cvinfo file and from HistoTool (frequency and proton_charge).

      **(log)**: :ref:`NXlog`


        .. index:: average value (field)

        **average_value**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: average value error (field)

        **average_value_error**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: description (field)

        **description**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: duration (field)

        **duration**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: maximum value (field)

        **maximum_value**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: minimum value (field)

        **minimum_value**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: time (field)

        **time[nvalue]**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: value (field)

        **value[nvalue]**: :ref:`NX_FLOAT <NX_FLOAT>`


      **(positioner)**: (optional) :ref:`NXpositioner`

        Motor logs from cvinfo file.

        .. index:: average value (field)

        **average_value**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: average value error (field)

        **average_value_error**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: description (field)

        **description**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: duration (field)

        **duration**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: maximum value (field)

        **maximum_value**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: minimum value (field)

        **minimum_value**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: time (field)

        **time[numvalue]**: :ref:`NX_FLOAT <NX_FLOAT>`


        .. index:: value (field)

        **value[numvalue]**: :ref:`NX_FLOAT <NX_FLOAT>`


    **SNSHistoTool**: :ref:`NXnote`


      .. index:: SNSbanking file name (field)

      **SNSbanking_file_name**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: SNSmapping file name (field)

      **SNSmapping_file_name**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: author (field)

      **author**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: command1 (field)

      **command1**: :ref:`NX_CHAR <NX_CHAR>`

        Command string for event2nxl.

      .. index:: date (field)

      **date**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: description (field)

      **description**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: version (field)

      **version**: :ref:`NX_CHAR <NX_CHAR>`


    **(data)**: :ref:`NXdata`


      **data_x_y** --> /NXentry/NXinstrument/NXdetector/data_x_y


      **x_pixel_offset** --> /NXentry/NXinstrument/NXdetector/x_pixel_offset


      **y_pixel_offset** --> /NXentry/NXinstrument/NXdetector/y_pixel_offset


    **(event_data)**: :ref:`NXevent_data`


      **event_index** --> /NXentry/NXinstrument/NXdetector/event_index


      **event_pixel_id** --> /NXentry/NXinstrument/NXdetector/event_pixel_id


      **event_time_of_flight** --> /NXentry/NXinstrument/NXdetector/event_time_of_flight


      **pulse_time** --> /NXentry/NXinstrument/NXdetector/pulse_time


    **instrument**: :ref:`NXinstrument`


      .. index:: SNSdetector calibration id (field)

      **SNSdetector_calibration_id**: :ref:`NX_CHAR <NX_CHAR>`

        Detector calibration id from DAS.

      .. index:: SNSgeometry file name (field)

      **SNSgeometry_file_name**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: SNStranslation service (field)

      **SNStranslation_service**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: beamline (field)

      **beamline**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: name (field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`


      **SNS**: :ref:`NXsource`


        .. index:: frequency (field)

        **frequency**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_FREQUENCY <NX_FREQUENCY>`}


        .. index:: name (field)

        **name**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: probe (field)

        **probe**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: type (field)

        **type**: :ref:`NX_CHAR <NX_CHAR>`


      **(detector)**: :ref:`NXdetector`


        .. index:: azimuthal angle (field)

        **azimuthal_angle[numx, numy]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


        .. index:: data x y (field)

        **data_x_y[numx, numy]**: :ref:`NX_UINT <NX_UINT>`

          expect  ``signal=2 axes="x_pixel_offset,y_pixel_offset``"

        .. index:: distance (field)

        **distance[numx, numy]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        .. index:: event index (field)

        **event_index[numpulses]**: :ref:`NX_UINT <NX_UINT>`


        .. index:: event pixel id (field)

        **event_pixel_id[numevents]**: :ref:`NX_UINT <NX_UINT>`


        .. index:: event time of flight (field)

        **event_time_of_flight[numevents]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}


        .. index:: pixel id (field)

        **pixel_id[numx, numy]**: :ref:`NX_UINT <NX_UINT>`


        .. index:: polar angle (field)

        **polar_angle[numx, numy]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}


        .. index:: pulse time (field)

        **pulse_time[numpulses]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`}


        .. index:: total counts (field)

        **total_counts**: :ref:`NX_UINT <NX_UINT>`


        .. index:: x pixel offset (field)

        **x_pixel_offset[numx]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        .. index:: y pixel offset (field)

        **y_pixel_offset[numy]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        **origin**: :ref:`NXgeometry`


          **orientation**: :ref:`NXorientation`


            .. index:: value (field)

            **value[6]**: :ref:`NX_FLOAT <NX_FLOAT>`

              Six out of nine rotation parameters.

          **shape**: :ref:`NXshape`


            .. index:: description (field)

            **description**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: shape (field)

            **shape**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: size (field)

            **size[3]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


          **translation**: :ref:`NXtranslation`


            .. index:: distance (field)

            **distance[3]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      **(disk_chopper)**: (optional) :ref:`NXdisk_chopper`


        .. index:: distance (field)

        **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      **moderator**: :ref:`NXmoderator`


        .. index:: coupling material (field)

        **coupling_material**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: distance (field)

        **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        .. index:: temperature (field)

        **temperature**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TEMPERATURE <NX_TEMPERATURE>`}


        .. index:: type (field)

        **type**: :ref:`NX_CHAR <NX_CHAR>`


      **(aperture)**: (optional) :ref:`NXaperture`


        .. index:: x pixel offset (field)

        **x_pixel_offset**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        **origin**: :ref:`NXgeometry`


          **orientation**: :ref:`NXorientation`


            .. index:: value (field)

            **value[6]**: :ref:`NX_FLOAT <NX_FLOAT>`

              Six out of nine rotation parameters.

          **shape**: :ref:`NXshape`


            .. index:: description (field)

            **description**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: shape (field)

            **shape**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: size (field)

            **size[3]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


          **translation**: :ref:`NXtranslation`


            .. index:: distance (field)

            **distance[3]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      **(attenuator)**: (optional) :ref:`NXattenuator`


        .. index:: distance (field)

        **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      **(polarizer)**: (optional) :ref:`NXpolarizer`


      **(crystal)**: (optional) :ref:`NXcrystal`


        .. index:: type (field)

        **type**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: wavelength (field)

        **wavelength**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_WAVELENGTH <NX_WAVELENGTH>`}


        **origin**: :ref:`NXgeometry`


          .. index:: description (field)

          **description**: :ref:`NX_CHAR <NX_CHAR>`


          **orientation**: :ref:`NXorientation`


            .. index:: value (field)

            **value[6]**: :ref:`NX_FLOAT <NX_FLOAT>`

              Six out of nine rotation parameters.

          **shape**: :ref:`NXshape`


            .. index:: description (field)

            **description**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: shape (field)

            **shape**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: size (field)

            **size**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


          **translation**: :ref:`NXtranslation`


            .. index:: distance (field)

            **distance[3]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


    **(monitor)**: (optional) :ref:`NXmonitor`


      .. index:: data (field)

      **data[numtimechannels]**: :ref:`NX_UINT <NX_UINT>`

        expect  ``signal=1 axes="time_of_flight"``

      .. index:: distance (field)

      **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      .. index:: mode (field)

      **mode**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: time of flight (field)

      **time_of_flight[numtimechannels + 1]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`}


    **sample**: :ref:`NXsample`


      .. index:: changer position (field)

      **changer_position**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: holder (field)

      **holder**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: identifier (field)

      **identifier**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: name (field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`

        Descriptive name of sample

      .. index:: nature (field)

      **nature**: :ref:`NX_CHAR <NX_CHAR>`


    **(user)**: :ref:`NXuser`


      .. index:: facility user id (field)

      **facility_user_id**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: name (field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`


      .. index:: role (field)

      **role**: :ref:`NX_CHAR <NX_CHAR>`


**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/master/contributed_definitions/NXsnsevent.nxdl.xml
