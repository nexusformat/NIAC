.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source NXtofsingle.nxdl.xml

.. index::
    ! NXtofsingle (application definition)
    ! tofsingle (application definition)
    see: tofsingle (application definition); NXtofsingle

.. _NXtofsingle:

===========
NXtofsingle
===========

**Status**:

  application definition, extends :ref:`NXobject`, version 1.0b

**Description**:

  This is a application definition for raw data from a generic TOF instrument

**Symbols**:

  No symbol table

**Groups cited**:
  :ref:`NXdata`, :ref:`NXdetector`, :ref:`NXentry`, :ref:`NXinstrument`, :ref:`NXmonitor`, :ref:`NXsample`, :ref:`NXuser`

.. index:: NXentry (base class); used in application definition, NXuser (base class); used in application definition, NXinstrument (base class); used in application definition, NXdetector (base class); used in application definition, NXsample (base class); used in application definition, NXmonitor (base class); used in application definition, NXdata (base class); used in application definition

**Structure**:

  **entry**: :ref:`NXentry`


    .. index:: title (field)

    **title**: :ref:`NX_CHAR <NX_CHAR>`


    .. index:: start time (field)

    **start_time**: :ref:`NX_DATE_TIME <NX_DATE_TIME>`


    .. index:: definition (field)

    **definition**: :ref:`NX_CHAR <NX_CHAR>`

      Official NeXus NXDL schema to which this file conforms

      Obligatory value:  ``NXtofsingle``

    .. index:: duration (field)

    **duration**: :ref:`NX_FLOAT <NX_FLOAT>`


    .. index:: pre sample flightpath (field)

    **pre_sample_flightpath**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

      This is the flight path before the sample position. This can be determined by a chopper,
      by the moderator or the source itself. In other words: it the distance to the component
      which gives the T0 signal to the detector electronics. If another component in the
      NXinstrument hierarchy provides this information, this should be a link.

    **user**: :ref:`NXuser`


      .. index:: name (field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`


    **(instrument)**: :ref:`NXinstrument`


      **detector**: :ref:`NXdetector`


        .. index:: data (field)

        **data[xsize, ysize, ntimechan]**: :ref:`NX_INT <NX_INT>`


        .. index:: distance (field)

        **distance[1]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

          Distance to sample for the center of the detector

        .. index:: time of flight (field)

        **time_of_flight[ntimechan]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}


        .. index:: polar angle (field)

        **polar_angle[ndet]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}

          polar angle for each detector element

        .. index:: azimuthal angle (field)

        **azimuthal_angle[ndet]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}

          azimuthal angle for each detector element

    **(sample)**: :ref:`NXsample`


      .. index:: name (field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`

        Descriptive name of sample

      .. index:: nature (field)

      **nature**: :ref:`NX_CHAR <NX_CHAR>`


        Any of these values: ``powder`` | ``liquid`` | ``single crystal``

    **(monitor)**: :ref:`NXmonitor`


      .. index:: mode (field)

      **mode**: :ref:`NX_CHAR <NX_CHAR>`

        Count to a preset value based on either clock time (timer)
        or received monitor counts (monitor).

        Any of these values: ``monitor`` | ``timer``

      .. index:: preset (field)

      **preset**: :ref:`NX_FLOAT <NX_FLOAT>`

        preset value for time or monitor

      .. index:: distance (field)

      **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


      .. index:: data (field)

      **data[ntimechan]**: :ref:`NX_INT <NX_INT>`


      .. index:: time of flight (field)

      **time_of_flight[ntimechan]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}


    **data**: :ref:`NXdata`


      **data** --> /NXentry/NXinstrument/NXdetector/data


      **detector_number** --> /NXentry/NXinstrument/NXdetector/detector_number


      **time_of_flight** --> /NXentry/NXinstrument/NXdetector/time_of_flight


**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/master/applications/NXtofsingle.nxdl.xml
