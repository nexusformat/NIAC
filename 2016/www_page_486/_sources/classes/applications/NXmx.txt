.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source NXmx.nxdl.xml

.. index::
    ! NXmx (application definition)
    ! mx (application definition)
    see: mx (application definition); NXmx

.. _NXmx:

====
NXmx
====

**Status**:

  application definition, extends :ref:`NXobject`, version 1.4

**Description**:

  functional application definition for macromolecular crystallography

**Symbols**:

  These symbols will be used below to coordinate datasets
  with the same shape.

  **np**: number of scan points

  **i**: number of detector pixels in the slow direction

  **j**: number of detector pixels in the fast direction

**Groups cited**:
  :ref:`NXattenuator`, :ref:`NXbeam`, :ref:`NXcollection`, :ref:`NXdata`, :ref:`NXdetector_module`, :ref:`NXdetector`, :ref:`NXentry`, :ref:`NXinstrument`, :ref:`NXsample`, :ref:`NXtransformations`

.. index:: NXentry (base class); used in application definition, NXinstrument (base class); used in application definition, NXattenuator (base class); used in application definition, NXdetector (base class); used in application definition, NXtransformations (base class); used in application definition, NXcollection (base class); used in application definition, NXdetector_module (base class); used in application definition, NXsample (base class); used in application definition, NXbeam (base class); used in application definition, NXdata (base class); used in application definition

**Structure**:

  **(entry)**: :ref:`NXentry`


    .. index:: title (field)

    **title**: (optional) :ref:`NX_CHAR <NX_CHAR>`


    .. index:: start time (field)

    **start_time**: (optional) :ref:`NX_DATE_TIME <NX_DATE_TIME>`


    .. index:: end time (field)

    **end_time**: (optional) :ref:`NX_DATE_TIME <NX_DATE_TIME>`


    .. index:: definition (field)

    **definition**: :ref:`NX_CHAR <NX_CHAR>`

      NeXus NXDL schema to which this file conforms

      Obligatory value:  ``NXmx``

    **(instrument)**: :ref:`NXinstrument`


      **(attenuator)**: (optional) :ref:`NXattenuator`


        .. index:: attenuator transmission (field)

        **attenuator_transmission**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`}


      **(detector)**: :ref:`NXdetector`


        .. index:: depends on (field)

        **depends_on**: :ref:`NX_CHAR <NX_CHAR>`


        .. index:: data (field)

        **data[np, i, j]**: :ref:`NX_NUMBER <NX_NUMBER>`


        .. index:: description (field)

        **description**: (optional) :ref:`NX_CHAR <NX_CHAR>`

          name/manufacturer/model/etc. information

        .. index:: time per channel (field)

        **time_per_channel**: (optional) :ref:`NX_CHAR <NX_CHAR>` {units=\ :ref:`NX_TIME <NX_TIME>`}

          todo: define more clearly

        .. index:: distance (field)

        **distance**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

          Distance from the sample to the beam center.
          This value is a
          guidance only, the proper geometry can be
          found following the
          depends_on axis chain.

        .. index:: dead time (field)

        **dead_time**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`}

          Detector dead time

        .. index:: count time (field)

        **count_time**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_TIME <NX_TIME>`}

          Elapsed actual counting time

        .. index:: beam center x (field)

        **beam_center_x**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

          This is the x position where the direct beam would hit the
          detector. This is a length, not a pixel position, and can be
          outside of the actual detector.

        .. index:: beam center y (field)

        **beam_center_y**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

          This is the y position where the direct beam would hit the
          detector. This is a length, not a pixel position, and can be
          outside of the actual detector.

        .. index:: angular calibration applied (field)

        **angular_calibration_applied**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          True when the angular calibration has been applied in the
          electronics, false otherwise.

        .. index:: angular calibration (field)

        **angular_calibration[i, j]**: (optional) :ref:`NX_FLOAT <NX_FLOAT>`

          Angular calibration data.

        .. index:: flatfield applied (field)

        **flatfield_applied**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          True when the flat field correction has been applied in the
          electronics, false otherwise.

        .. index:: flatfield (field)

        **flatfield[i, j]**: (optional) :ref:`NX_FLOAT <NX_FLOAT>`

          Flat field correction data.

        .. index:: flatfield error (field)

        **flatfield_error[i, j]**: (optional) :ref:`NX_FLOAT <NX_FLOAT>`

          Errors of the flat field correction data.

        .. index:: pixel mask applied (field)

        **pixel_mask_applied**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          True when the pixel mask correction has been applied in the
          electronics, false otherwise.

        .. index:: pixel mask (field)

        **pixel_mask[i, j]**: (optional) :ref:`NX_INT <NX_INT>`

          The 32-bit pixel mask for the detector.
          Contains a bit field
          for each pixel to signal dead,
          blind or high or otherwise unwanted
          or undesirable pixels.
          They have the following meaning:

          * bit 0: gap (pixel with no sensor)
          * bit 1: dead
          * bit 2: under responding
          * bit 3: over responding
          * bit 4: noisy
          * bit 5: -undefined-
          * bit 6: pixel is part of a cluster of problematic pixels (bit set in addition to others)
          * bit 7: -undefined-
          * bit 8: user defined mask (e.g. around beamstop)
          * bits 9-30: -undefined-
          * bit 31: virtual pixel (corner pixel with interpolated value)

          Normal data analysis software would
          not take pixels into account
          when a bit in (mask & 0x0000FFFF) is
          set. Tag bit in the upper
          two bytes would indicate special pixel
          properties that normally
          would not be a sole reason to reject the
          intensity value (unless
          lower bits are set.

          If the full bit depths is not required, providing a 
          mask with fewer bits is permissible.

        .. index:: countrate correction applied (field)

        **countrate_correction_applied**: (optional) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          True when a count-rate correction has already been applied in
          the data recorded here, false otherwise.

        .. index:: bit depth readout (field)

        **bit_depth_readout**: (optional) :ref:`NX_INT <NX_INT>`

          How many bits the electronics record per pixel.

        .. index:: detector readout time (field)

        **detector_readout_time**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`}

          Time it takes to read the detector (typically milliseconds).
          This is important to know for time resolved experiments.

        .. index:: frame time (field)

        **frame_time**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME <NX_TIME>`}

          This is time for each frame. This is exposure_time + readout
          time.

        .. index:: gain setting (field)

        **gain_setting**: (optional) :ref:`NX_CHAR <NX_CHAR>`

          The gain setting of the detector. This influences background.

        .. index:: saturation value (field)

        **saturation_value**: (optional) :ref:`NX_INT <NX_INT>`

          The value at which the detector goes into saturation.
          Data
          above this value is known to be invalid.

        .. index:: sensor material (field)

        **sensor_material**: (optional) :ref:`NX_CHAR <NX_CHAR>`

          At times, radiation is not directly sensed by the detector.
          Rather, the detector might sense the output from some
          converter
          like a scintillator.
          This is the name of this converter material.

        .. index:: sensor thickness (field)

        **sensor_thickness**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

          At times, radiation is not directly sensed by the detector.
          Rather, the detector might sense the output from some
          converter
          like a scintillator. This is the thickness of this
          converter
          material.

        .. index:: threshold energy (field)

        **threshold_energy**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ENERGY <NX_ENERGY>`}

          Single photon counter detectors can be adjusted for a certain
          energy range in which they work optimally. This is the energy
          setting for this.

        .. index:: type (field)

        **type**: (optional) :ref:`NX_CHAR <NX_CHAR>`

          Description of type such as scintillator,
          ccd, pixel, image
          plate, CMOS, ...

        **(transformations)**: (optional) :ref:`NXtransformations`

          Suggested location for axes (transformations) to do with the
          detector

        **(collection)**: (optional) :ref:`NXcollection`

          Suggested container for detailed non-standard detector
          information like corrections applied automatically or
          performance settings.

        **(detector_module)**: :ref:`NXdetector_module`

          Many detectors consist of multiple smaller modules that are
          operated in sync and store their data in a common dataset. 
          To allow consistent parsing of the experimental geometry,
          this application definiton requires all detectors to 
          define a detector module, even if there is only one.

          .. index:: data origin (field)

          **data_origin**: :ref:`NX_INT <NX_INT>`

            A two value field which gives the index of the start of the
            modules data in the
            main area detector image in the underlying NXdetector module.

          .. index:: data size (field)

          **data_size**: :ref:`NX_INT <NX_INT>`

            Two values for the size of the module in pixels in each direction.

          .. index:: module offset (field)

          **module_offset**: :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

            Offset of the module in regards to the origin of the detector in an
            arbitrary direction.

            .. index:: transformation type (field attribute)

            **@transformation_type**: :ref:`NX_CHAR <NX_CHAR>`


              Obligatory value:  ``translation``

            .. index:: vector (field attribute)

            **@vector**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: offset (field attribute)

            **@offset**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: depends on (field attribute)

            **@depends_on**: :ref:`NX_CHAR <NX_CHAR>`


          .. index:: fast pixel direction (field)

          **fast_pixel_direction**: :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

            Values along the direction of fastest varying pixel direction.The
            direction itself is given through the vector attribute

            .. index:: transformation type (field attribute)

            **@transformation_type**: :ref:`NX_CHAR <NX_CHAR>`


              Obligatory value:  ``translation``

            .. index:: vector (field attribute)

            **@vector**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: offset (field attribute)

            **@offset**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: depends on (field attribute)

            **@depends_on**: :ref:`NX_CHAR <NX_CHAR>`


          .. index:: slow pixel direction (field)

          **slow_pixel_direction**: :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

            Values along the direction of slow varying pixel direction. The
            direction itself is given through the vector attribute

            .. index:: transformation type (field attribute)

            **@transformation_type**: :ref:`NX_CHAR <NX_CHAR>`


              Obligatory value:  ``translation``

            .. index:: vector (field attribute)

            **@vector**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: offset (field attribute)

            **@offset**: :ref:`NX_CHAR <NX_CHAR>`


            .. index:: depends on (field attribute)

            **@depends_on**: :ref:`NX_CHAR <NX_CHAR>`


    **(sample)**: :ref:`NXsample`


      .. index:: name (field)

      **name**: (optional) :ref:`NX_CHAR <NX_CHAR>`

        Descriptive name of sample

      .. index:: depends on (field)

      **depends_on**: (optional) :ref:`NX_CHAR <NX_CHAR>`

        This should be an absolute requirement to have for any scan
        experiment.
        The reason it is optional is mainly to accommodate XFEL
        single shot exposures.

      .. index:: temperature (field)

      **temperature**: (optional) :ref:`NX_CHAR <NX_CHAR>` {units=\ :ref:`NX_TEMPERATURE <NX_TEMPERATURE>`}


      **(beam)**: :ref:`NXbeam`


        .. index:: incident wavelength (field)

        **incident_wavelength**: (optional) :ref:`NX_NUMBER <NX_NUMBER>` {units=\ :ref:`NX_WAVELENGTH <NX_WAVELENGTH>`}


        .. index:: flux (field)

        **flux**: (optional) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_FLUX <NX_FLUX>`}

          flux incident on beam plane area

        .. index:: incident polarisation stokes (field)

        **incident_polarisation_stokes[np, 4]**: (optional) :ref:`NX_CHAR <NX_CHAR>`


        **incident_wavelength_spectrum**: (optional) :ref:`NXdata`


      **(transformations)**: (optional) :ref:`NXtransformations`

        Suggested location for sample goniometer or other axes (transformations)

    **(data)**: :ref:`NXdata`


**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/master/applications/NXmx.nxdl.xml
