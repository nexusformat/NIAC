.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source NXlauetof.nxdl.xml

.. index::
    ! NXlauetof (application definition)
    ! lauetof (application definition)
    see: lauetof (application definition); NXlauetof

.. _NXlauetof:

=========
NXlauetof
=========

**Status**:

  application definition, extends :ref:`NXobject`, version 1.0b

**Description**:

  This is the application definition for a TOF laue diffractometer

**Symbols**:

  No symbol table

**Groups cited**:
  :ref:`NXdata`, :ref:`NXdetector`, :ref:`NXentry`, :ref:`NXinstrument`, :ref:`NXmonitor`, :ref:`NXsample`

.. index:: NXentry (base class); used in application definition, NXinstrument (base class); used in application definition, NXdetector (base class); used in application definition, NXsample (base class); used in application definition, NXmonitor (base class); used in application definition, NXdata (base class); used in application definition

**Structure**:

  **entry**: :ref:`NXentry`


    .. index:: definition (field)

    **definition**: :ref:`NX_CHAR <NX_CHAR>`

      Official NeXus NXDL schema to which this file conforms

      Obligatory value:  ``NXlauetof``

    **instrument**: :ref:`NXinstrument`


      **detector**: :ref:`NXdetector`

        This assumes a planar 2D detector. All angles and distances refer to the center of the 
        detector.

        .. index:: polar angle (field)

        **polar_angle**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}

          The polar_angle (two theta) where the detector is placed.

        .. index:: azimuthal angle (field)

        **azimuthal_angle**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_ANGLE <NX_ANGLE>`}

          The azimuthal angle where the detector is placed.

        .. index:: data (field)

        **data[number of x pixels, number of y pixels, nTOF]**: :ref:`NX_INT <NX_INT>`


          .. index:: signal (field attribute)

          **@signal**: :ref:`NX_POSINT <NX_POSINT>`


            Obligatory value:  ``1``

        .. index:: x pixel size (field)

        **x_pixel_size**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        .. index:: y pixel size (field)

        **y_pixel_size**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        .. index:: distance (field)

        **distance**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}


        .. index:: time of flight (field)

        **time_of_flight[nTOF]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}


    **sample**: :ref:`NXsample`


      .. index:: name (field)

      **name**: :ref:`NX_CHAR <NX_CHAR>`

        Descriptive name of sample

      .. index:: orientation matrix (field)

      **orientation_matrix[3, 3]**: :ref:`NX_FLOAT <NX_FLOAT>`

        The orientation matrix according to Busing and 
        Levy conventions. This is not strictly necessary as 
        the UB can always be derived from the data.  But 
        let us bow to common usage which includes thie 
        UB nearly always.

      .. index:: unit cell (field)

      **unit_cell[6]**: :ref:`NX_FLOAT <NX_FLOAT>`

        The unit cell, a, b, c, alpha, beta, gamma. 
        Again, not strictly necessary, but normally written.

    **control**: :ref:`NXmonitor`


      .. index:: mode (field)

      **mode**: :ref:`NX_CHAR <NX_CHAR>`

        Count to a preset value based on either clock time (timer) or received monitor counts
                 (monitor).

        Any of these values: ``monitor`` | ``timer``

      .. index:: preset (field)

      **preset**: :ref:`NX_FLOAT <NX_FLOAT>`

        preset value for time or monitor

      .. index:: data (field)

      **data[nTOF]**: :ref:`NX_INT <NX_INT>`

        use these attributes  ``primary=1 signal=1``

      .. index:: time of flight (field)

      **time_of_flight[nTOF]**: :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_TIME_OF_FLIGHT <NX_TIME_OF_FLIGHT>`}


    **name**: :ref:`NXdata`


      **data** --> /NXentry/NXinstrument/NXdetector/data


      **time_of_flight** --> /NXentry/NXinstrument/NXdetector/time_of_flight


**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/master/applications/NXlauetof.nxdl.xml
